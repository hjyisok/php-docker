version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mysql:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}

services:

  ### nginx ########################################
  nginx:
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ${NGINX_VHOST_PATH}:/etc/nginx/vhost
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
    hostname: phpdock-nginx
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
      - php-fpm72
    networks:
      - frontend
      - backend

  ### php-fpm ########################################
  php-fpm:
    build:
      context: ./php-fpm
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - PHP_VERSION=${PHP_VERSION}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ./php-fpm/php-fpm-conf.ini:/usr/local/etc/php-fpm.d/zz-docker.conf
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    hostname: phpdock-php-fpm
    expose:
      - "9000"
    networks:
      - backend

  php-fpm72:
    build:
      context: ./php-fpm
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - PHP_VERSION=7.2
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ./php-fpm/php-fpm-conf.ini:/usr/local/etc/php-fpm.d/zz-docker.conf
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    hostname: phpdock-php-fpm
    expose:
      - "9002"
    networks:
      - backend

  ### php-cli ########################################
  php-cli:
    build:
      context: ./php-cli
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - PHP_VERSION=${PHP_VERSION}
        - http_proxy
        - https_proxy
        - no_proxy
    stdin_open: true
    tty: true
    volumes:
      - ./php-cli/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    hostname: phpdock-php-cli
    networks:
      - backend

  php-cli72:
    build:
      context: ./php-cli
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - PHP_VERSION=7.2
        - http_proxy
        - https_proxy
        - no_proxy
    stdin_open: true
    tty: true
    volumes:
      - ./php-cli/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    hostname: phpdock-php-cli
    networks:
      - backend

  ### Portainer ################################################
  portainer:
    build:
      context: ./portainer
    volumes:
      - ${DATA_PATH_HOST}/portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    hostname: phpdock-portainer
    ports:
      - "${PORTAINER_WEB_PORT}:9000"
    networks:
      - backend

  ### Memcached ############################################
  memcached:
    build:
      context: ./memcached
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
    hostname: phpdock-memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    networks:
      - backend

  ### Redis ################################################
  redis:
    build:
      context: ./redis
      args:
        - TIMEZONE=${TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    hostname: phpdock-redis
    ports:
      - "${REDIS_HOST_PORT}:6379"
    networks:
      - backend
    sysctls:
      net.core.somaxconn: 1024

  ### REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    hostname: phpdock-redis-webui
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    networks:
      - backend
    depends_on:
      - redis

  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    hostname: phpdock-mysql
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    networks:
      - backend

  ### MongoDB ##############################################
  mongo:
    build:
      context: ./mongo
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
    hostname: phpdock-mongo
    ports:
      - "${MONGODB_HOST_PORT}:27017"
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - ELK_VERSION=${ELK_VERSION}
    environment:
      cluster.name: phpdock-cluster
      node.name: phpdock-node
      cluster.initial_master_nodes: phpdock-node
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS": "-Xms128m -Xmx128m"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 3

  ### node ########################################
  node:
    build:
      context: ./node
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - NODE_VERSION=${NODE_VERSION}
    #    command: ["pm2", "start", "/app/pm2.json"]
    command: [ "pm2-runtime", "start", "pm2.json" ]
    hostname: phpdock-node
    ports:
      - "${NODE_HOST_PORT}:3000"
    volumes:
      - /Users/tian/2020/docker/phpdock/www/pm2:/app
    #      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    networks:
      - frontend

  ### java ########################################
  java:
    build:
      context: ./java
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - TIMEZONE=${TIMEZONE}
        - JAVA_VERSION=${JAVA_VERSION}
    #    command: ["pm2-runtime", "start", "pm2.json"]
    hostname: phpdock-java
    #    ports:
    #      - "${NODE_HOST_PORT}:3000"
    volumes:
      - /Users/tian/2020/github/alibaba/canal:/app
    #      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    networks:
      - frontend
